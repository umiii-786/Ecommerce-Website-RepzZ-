<%- layout('backend_boilerplate.ejs') %>
    <link rel="stylesheet" href="/CSS/customer_message.css">
    <div class="messages_container">
        <div class="page-header">
            <h1 class="page-title">Customer Messages</h1>
        </div>

        <div class="chat-container">
            <div class="chat-layout">
                <!-- Sidebar with conversations -->
                <div class="chat-sidebar" id="sidebar">
                    <ul class="conversation-list" id="conversation-list">
                        <!-- Conversation items will be dynamically added here -->
                    </ul>
                </div>

                <!-- Main chat area -->
                <div class="chat-main">
                    <div class="chat-header" id="chat-header">
                        Select a conversation to start
                    </div>
                    <div class="message-area" id="message-area">
                        <!-- Messages will be dynamically added here -->
                    </div>
                    <form class="message-form" id="message-form">
                        <input type="text" id="message-input" class="message-input" placeholder="Type your message...">
                        <button type="submit" class="send-button">Send</button>
                    </form>
                </div>
            </div>
        </div>

        <div id="status-message" class="message-box"></div>
    </div>


    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userData =<%- JSON.stringify(user) %>;
        const conversations =<%- JSON.stringify(chats) %>;
        console.log(userData)
        const adminID = userData._id
        const socket = io();
        socket.emit('register_admin', adminID)

           socket.on('user_message', ({from, message, userChat}) => {
              console.log('received User Message')
              console.log(userChat)
              console.log(message)
              console.log(from)
              let check=checkInExistingConversation(userChat)
              console.log(check,'after checking in existing',conversations)
              if(check==-1){
                  conversations.push(userChat)
                  check_for_renderring_message(userChat)
                }
                else{
                    conversations[check].messages.push(userChat.messages[userChat.messages.length-1])
                    check_for_renderring_message(conversations[check])
              }
            
        })


        const conversationListEl = document.getElementById('conversation-list');
        const chatHeaderEl = document.getElementById('chat-header');
        const messageAreaEl = document.getElementById('message-area');
        const messageFormEl = document.getElementById('message-form');
        const messageInputEl = document.getElementById('message-input');
        const statusMessageEl = document.getElementById('status-message');

        // Dummy data for conversations and messages
        /* [
            {
                id: 'cust-1',
                name: 'Jane Doe',
                lastMessage: 'I need to return an item.',
                messages: [
                    { sender: 'customer', text: 'Hi, I received my order but it\'s the wrong size.', time: '10:00 AM' },
                    { sender: 'agent', text: 'Hello! I am sorry to hear that. Could you please provide your order number?', time: '10:05 AM' },
                    { sender: 'customer', text: 'It\'s #4567-GRZ. I need to return it and get a refund.', time: '10:07 AM' }
                ]
            },
            {
                id: 'cust-2',
                name: 'John Smith',
                lastMessage: 'Where is my order?',
                messages: [
                    { sender: 'customer', text: 'Hi, I ordered a pair of shoes last week and the tracking hasn\'t updated.', time: 'Yesterday' },
                    { sender: 'agent', text: 'Hello John, let me check the status for you. What is your order ID?', time: 'Yesterday' }
                ]
            },
            {
                id: 'cust-3',
                name: 'Alice Johnson',
                lastMessage: 'Just wanted to say thank you!',
                messages: [
                    { sender: 'customer', text: 'Just received my order. The quality is amazing! Thank you!', time: '2 days ago' },
                    { sender: 'agent', text: 'That\'s great to hear, Alice! We appreciate your feedback.', time: '2 days ago' }
                ]
            }
        ];*/

        let activeConversation = null;

        // Function to render the list of conversations
        function renderConversations() {
            console.log('render conversation run hoya ')
            conversationListEl.innerHTML = '';
            conversations.forEach(eachChat => {
                const li = document.createElement('li');
                li.classList.add('conversation-item');
                li.setAttribute('data-id', eachChat.userid._id);
                li.innerHTML = `
                    <div class="conversation-name">${eachChat.userid.username}</div>
                    <div class="last-message">${eachChat.last_message}</div>
                `;
                li.addEventListener('click', () => {
                    selectConversation(eachChat);
                });
                conversationListEl.appendChild(li);
            });
        }

        // Function to select and display a conversation
        function selectConversation(eachChat) {
        
            // Remove active class from previous item
            if (activeConversation) {
                const prevActive = document.querySelector(`.conversation-item[data-id="${activeConversation.userid._id}"]`);
                if (prevActive) prevActive.classList.remove('active');
            }

            // Add active class to new item
            const newActive = document.querySelector(`.conversation-item[data-id="${eachChat.userid._id}"]`);
            if (newActive) newActive.classList.add('active');

            activeConversation = eachChat;
            chatHeaderEl.textContent = `Chat with ${eachChat.userid.username}`;
            renderMessages(eachChat.messages);
            messageFormEl.style.display = 'flex';
        }

        // Function to render messages in the chat area
        function renderMessages(messages) {
            messageAreaEl.innerHTML = '';
            messages.forEach(msg => {
                const msgEl = document.createElement('div');
                msgEl.classList.add('message', msg.sender === 'admin' ? 'sent' : 'received');
                msgEl.innerHTML = `
                    <div>${msg.message}</div>
                    <div class="message-time">${msg.time}</div>
                `;
                messageAreaEl.appendChild(msgEl);
            });
            // Scroll to the bottom of the message area
            messageAreaEl.scrollTop = messageAreaEl.scrollHeight;
        }

        // Function to handle sending a new message
     
        function check_for_renderring_message(userChat){
            console.log('in the renderring message')
            if(!activeConversation){
                activeConversation=userChat
                renderMessages(userChat.messages)
            }
        }

        function checkInExistingConversation(user){
            for(let i=0;i<conversations.length;i++){
                    if(conversations[i].userinfo._id==user.userid._id){
                        return i;
                    }
              }
            return -1
        }
        function handleSendMessage(event) {
            event.preventDefault();
            const text = messageInputEl.value.trim();
/*if (text && activeConversation) {
                activeConversation.messages.push(newMessage);
                renderMessages(activeConversation.messages);
                messageInputEl.value = '';
            }
            else{

            }*/
        }

        // Initial setup
        window.onload = () => {
            renderConversations();
            messageFormEl.addEventListener('submit', handleSendMessage);
        };

    </script>
