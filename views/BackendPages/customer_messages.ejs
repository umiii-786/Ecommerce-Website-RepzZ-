<%- layout('backend_boilerplate.ejs') %>
    <link rel="stylesheet" href="/CSS/customer_message.css">
    <div class="messages_container">
        <div class="page-header">
            <h1 class="page-title">Customer Messages</h1>
        </div>

        <div class="chat-container">
            <div class="chat-layout">
                <!-- Sidebar with conversations -->
                <div class="chat-sidebar" id="sidebar">
                    <ul class="conversation-list" id="conversation-list">
                        <!-- Conversation items will be dynamically added here -->
                    </ul>
                </div>

                <!-- Main chat area -->
                <div class="chat-main">
                    <div class="chat-header" id="chat-header">
                        Select a conversation to start
                    </div>
                    <div class="message-area" id="message-area">
                        <!-- Messages will be dynamically added here -->
                    </div>
                    <form class="message-form" id="message-form">
                        <input type="text" id="message-input" class="message-input" placeholder="Type your message...">
                        <button type="submit" class="send-button">Send</button>
                    </form>
                </div>
            </div>
        </div>

        <div id="status-message" class="message-box"></div>
    </div>


    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userData =<%- JSON.stringify(user) %>;
        const conversations =<%- JSON.stringify(chats) %>;

        const conversationListEl = document.getElementById('conversation-list');
        const chatHeaderEl = document.getElementById('chat-header');
        const messageAreaEl = document.getElementById('message-area');
        const messageFormEl = document.getElementById('message-form');
        const messageInputEl = document.getElementById('message-input');
        const statusMessageEl = document.getElementById('status-message');
        const send_button = document.querySelector('.send-button');

        send_button.addEventListener('click', handleSendMessage)
        let activeConversation = null;
        console.log(conversations)
        console.log(userData)
        const adminID = userData._id

        const socket = io();
        socket.emit('register_admin', adminID)
        socket.on('user_message', ({ from, userChat }) => {

            let check = checkInExistingConversation(userChat)
            console.log(check, 'after checking in existing', conversations)
            if (check == -1) {
                conversations.push(userChat)
                renderConversations()
                check_for_renderring_message(userChat)
            }
            else {
                console.log(userChat.messages[userChat.messages.length - 1])
                conversations[check].messages.push(userChat.messages[userChat.messages.length - 1])
                console.log(conversations[check])
                check_for_renderring_message(conversations[check])
            }
        })


        function renderConversations() {
            //console.log('render conversation run hoya ')
            conversationListEl.innerHTML = '';
            conversations.forEach(eachChat => {
                const li = document.createElement('li');
                li.classList.add('conversation-item');
                li.setAttribute('data-id', eachChat.userid._id);
                li.innerHTML = `
                    <div class="conversation-name">${eachChat.userid.username}</div>
                    <div class="last-message">${eachChat.last_message}</div>
                `;
                li.addEventListener('click', () => {
                    selectConversation(eachChat);
                });
                conversationListEl.appendChild(li);
            });
        }


        // Function to select and display a conversation
        function selectConversation(eachChat) {

            if (activeConversation) {
                const prevActive = document.querySelector(`.conversation-item[data-id="${activeConversation.userid._id}"]`);
                if (prevActive) prevActive.classList.remove('active');
            }

            const newActive = document.querySelector(`.conversation-item[data-id="${eachChat.userid._id}"]`);
            if (newActive) newActive.classList.add('active');

            activeConversation = eachChat;
            chatHeaderEl.textContent = `Chat with ${eachChat.userid.username}`;
            renderMessages(eachChat.messages);
            messageFormEl.style.display = 'flex';
        }

        // Function to render messages in the chat area
        function renderMessages(messages) {
            messageAreaEl.innerHTML = '';
            messages.forEach(msg => {
                const msgEl = document.createElement('div');
                msgEl.classList.add('message', msg.sender === 'admin' ? 'sent' : 'received');
                msgEl.innerHTML = `
                    <div>${msg.message}</div>
                    <div class="message-time">${msg.time}</div>
                `;
                messageAreaEl.appendChild(msgEl);
            });
            // Scroll to the bottom of the message area
            messageAreaEl.scrollTop = messageAreaEl.scrollHeight;
        }


        function check_for_renderring_message(userChat) {
            //   console.log('in the renderring message')
            if (!activeConversation) {
                activeConversation = userChat
                renderMessages(userChat.messages)
            }
            else {
                if (activeConversation.userid == userChat.userid) {
                    renderMessages(userChat.messages)
                }
                else {

                }
            }
        }

        function checkInExistingConversation(user) {
            for (let i = 0; i < conversations.length; i++) {
                if (conversations[i].userid._id == user.userid._id) {
                    console.log('same ha ')
                    return i;
                }
            }
            return -1
        }

        function handleSendMessage(event) {
            event.preventDefault();
            const text = messageInputEl.value.trim();
            if (activeConversation) {
                socket.emit('admin_response', {
                    to: activeConversation.userid._id,  // client ID
                    message: text
                });
                activeConversation.messages.push({
                    'sender': 'admin',
                    'message': text,
                    'time':'now'
                })
                renderMessages(activeConversation.messages)
            }
            messageInputEl.value = ''

        }

        // Initial setup
        window.onload = () => {
            renderConversations();
            messageFormEl.addEventListener('submit', handleSendMessage);
        };

    </script>